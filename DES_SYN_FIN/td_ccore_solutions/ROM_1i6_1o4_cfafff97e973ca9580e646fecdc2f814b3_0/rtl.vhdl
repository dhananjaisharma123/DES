-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.5c/896140 Production Release
--  HLS Date:       Sun Sep  6 22:45:38 PDT 2020
-- 
--  Generated by:   ds6365@hansolo.poly.edu
--  Generated date: Mon Mar  1 00:26:13 2021
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    ROM_1i6_1o4_cfafff97e973ca9580e646fecdc2f814b3
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;


ENTITY ROM_1i6_1o4_cfafff97e973ca9580e646fecdc2f814b3 IS
  PORT(
    I_1 : IN STD_LOGIC_VECTOR (5 DOWNTO 0);
    O_1 : OUT STD_LOGIC_VECTOR (3 DOWNTO 0)
  );
END ROM_1i6_1o4_cfafff97e973ca9580e646fecdc2f814b3;

ARCHITECTURE v1 OF ROM_1i6_1o4_cfafff97e973ca9580e646fecdc2f814b3 IS
  -- Default Constants

  FUNCTION MUX_v_4_64_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_4 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_5 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_6 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_7 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_8 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_9 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_10 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_11 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_12 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_13 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_14 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_15 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_16 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_17 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_18 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_19 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_20 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_21 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_22 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_23 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_24 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_25 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_26 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_27 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_28 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_29 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_30 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_31 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_32 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_33 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_34 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_35 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_36 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_37 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_38 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_39 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_40 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_41 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_42 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_43 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_44 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_45 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_46 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_47 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_48 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_49 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_50 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_51 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_52 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_53 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_54 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_55 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_56 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_57 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_58 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_59 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_60 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_61 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_62 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_63 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(5 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN "000000" =>
          result := input_0;
        WHEN "000001" =>
          result := input_1;
        WHEN "000010" =>
          result := input_2;
        WHEN "000011" =>
          result := input_3;
        WHEN "000100" =>
          result := input_4;
        WHEN "000101" =>
          result := input_5;
        WHEN "000110" =>
          result := input_6;
        WHEN "000111" =>
          result := input_7;
        WHEN "001000" =>
          result := input_8;
        WHEN "001001" =>
          result := input_9;
        WHEN "001010" =>
          result := input_10;
        WHEN "001011" =>
          result := input_11;
        WHEN "001100" =>
          result := input_12;
        WHEN "001101" =>
          result := input_13;
        WHEN "001110" =>
          result := input_14;
        WHEN "001111" =>
          result := input_15;
        WHEN "010000" =>
          result := input_16;
        WHEN "010001" =>
          result := input_17;
        WHEN "010010" =>
          result := input_18;
        WHEN "010011" =>
          result := input_19;
        WHEN "010100" =>
          result := input_20;
        WHEN "010101" =>
          result := input_21;
        WHEN "010110" =>
          result := input_22;
        WHEN "010111" =>
          result := input_23;
        WHEN "011000" =>
          result := input_24;
        WHEN "011001" =>
          result := input_25;
        WHEN "011010" =>
          result := input_26;
        WHEN "011011" =>
          result := input_27;
        WHEN "011100" =>
          result := input_28;
        WHEN "011101" =>
          result := input_29;
        WHEN "011110" =>
          result := input_30;
        WHEN "011111" =>
          result := input_31;
        WHEN "100000" =>
          result := input_32;
        WHEN "100001" =>
          result := input_33;
        WHEN "100010" =>
          result := input_34;
        WHEN "100011" =>
          result := input_35;
        WHEN "100100" =>
          result := input_36;
        WHEN "100101" =>
          result := input_37;
        WHEN "100110" =>
          result := input_38;
        WHEN "100111" =>
          result := input_39;
        WHEN "101000" =>
          result := input_40;
        WHEN "101001" =>
          result := input_41;
        WHEN "101010" =>
          result := input_42;
        WHEN "101011" =>
          result := input_43;
        WHEN "101100" =>
          result := input_44;
        WHEN "101101" =>
          result := input_45;
        WHEN "101110" =>
          result := input_46;
        WHEN "101111" =>
          result := input_47;
        WHEN "110000" =>
          result := input_48;
        WHEN "110001" =>
          result := input_49;
        WHEN "110010" =>
          result := input_50;
        WHEN "110011" =>
          result := input_51;
        WHEN "110100" =>
          result := input_52;
        WHEN "110101" =>
          result := input_53;
        WHEN "110110" =>
          result := input_54;
        WHEN "110111" =>
          result := input_55;
        WHEN "111000" =>
          result := input_56;
        WHEN "111001" =>
          result := input_57;
        WHEN "111010" =>
          result := input_58;
        WHEN "111011" =>
          result := input_59;
        WHEN "111100" =>
          result := input_60;
        WHEN "111101" =>
          result := input_61;
        WHEN "111110" =>
          result := input_62;
        WHEN others =>
          result := input_63;
      END CASE;
    RETURN result;
  END;

BEGIN
  O_1 <= MUX_v_4_64_2(STD_LOGIC_VECTOR'( "1111"), STD_LOGIC_VECTOR'( "0001"), STD_LOGIC_VECTOR'(
      "1000"), STD_LOGIC_VECTOR'( "1110"), STD_LOGIC_VECTOR'( "0110"), STD_LOGIC_VECTOR'(
      "1011"), STD_LOGIC_VECTOR'( "0011"), STD_LOGIC_VECTOR'( "0100"), STD_LOGIC_VECTOR'(
      "1001"), STD_LOGIC_VECTOR'( "0111"), STD_LOGIC_VECTOR'( "0010"), STD_LOGIC_VECTOR'(
      "1101"), STD_LOGIC_VECTOR'( "1100"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
      "0101"), STD_LOGIC_VECTOR'( "1010"), STD_LOGIC_VECTOR'( "0011"), STD_LOGIC_VECTOR'(
      "1101"), STD_LOGIC_VECTOR'( "0100"), STD_LOGIC_VECTOR'( "0111"), STD_LOGIC_VECTOR'(
      "1111"), STD_LOGIC_VECTOR'( "0010"), STD_LOGIC_VECTOR'( "1000"), STD_LOGIC_VECTOR'(
      "1110"), STD_LOGIC_VECTOR'( "1100"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'(
      "0001"), STD_LOGIC_VECTOR'( "1010"), STD_LOGIC_VECTOR'( "0110"), STD_LOGIC_VECTOR'(
      "1001"), STD_LOGIC_VECTOR'( "1011"), STD_LOGIC_VECTOR'( "0101"), STD_LOGIC_VECTOR'(
      "0000"), STD_LOGIC_VECTOR'( "1110"), STD_LOGIC_VECTOR'( "0111"), STD_LOGIC_VECTOR'(
      "1011"), STD_LOGIC_VECTOR'( "1010"), STD_LOGIC_VECTOR'( "0100"), STD_LOGIC_VECTOR'(
      "1101"), STD_LOGIC_VECTOR'( "0001"), STD_LOGIC_VECTOR'( "0101"), STD_LOGIC_VECTOR'(
      "1000"), STD_LOGIC_VECTOR'( "1100"), STD_LOGIC_VECTOR'( "0110"), STD_LOGIC_VECTOR'(
      "1001"), STD_LOGIC_VECTOR'( "0011"), STD_LOGIC_VECTOR'( "0010"), STD_LOGIC_VECTOR'(
      "1111"), STD_LOGIC_VECTOR'( "1101"), STD_LOGIC_VECTOR'( "1000"), STD_LOGIC_VECTOR'(
      "1010"), STD_LOGIC_VECTOR'( "0001"), STD_LOGIC_VECTOR'( "0011"), STD_LOGIC_VECTOR'(
      "1111"), STD_LOGIC_VECTOR'( "0100"), STD_LOGIC_VECTOR'( "0010"), STD_LOGIC_VECTOR'(
      "1011"), STD_LOGIC_VECTOR'( "0110"), STD_LOGIC_VECTOR'( "0111"), STD_LOGIC_VECTOR'(
      "1100"), STD_LOGIC_VECTOR'( "0000"), STD_LOGIC_VECTOR'( "0101"), STD_LOGIC_VECTOR'(
      "1110"), STD_LOGIC_VECTOR'( "1001"), I_1);
END v1;



